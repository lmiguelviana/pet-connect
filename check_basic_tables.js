const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkBasicTables() {
  console.log('üîç Verificando tabelas b√°sicas...')
  
  try {
    // Verificar tabela companies
    console.log('\nüìä Verificando tabela COMPANIES...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('count')
      .limit(1)
    
    if (companiesError) {
      console.log('‚ùå Tabela COMPANIES n√£o existe ou n√£o acess√≠vel:', companiesError.message)
    } else {
      console.log('‚úÖ Tabela COMPANIES existe e est√° acess√≠vel')
    }
    
    // Verificar tabela users
    console.log('\nüë§ Verificando tabela USERS...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (usersError) {
      console.log('‚ùå Tabela USERS n√£o existe ou n√£o acess√≠vel:', usersError.message)
      console.log('Detalhes do erro:', usersError)
    } else {
      console.log('‚úÖ Tabela USERS existe e est√° acess√≠vel')
    }
    
    // Verificar tabela clients
    console.log('\nüë• Verificando tabela CLIENTS...')
    const { data: clients, error: clientsError } = await supabase
      .from('clients')
      .select('count')
      .limit(1)
    
    if (clientsError) {
      console.log('‚ùå Tabela CLIENTS n√£o existe ou n√£o acess√≠vel:', clientsError.message)
    } else {
      console.log('‚úÖ Tabela CLIENTS existe e est√° acess√≠vel')
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

checkBasicTables()