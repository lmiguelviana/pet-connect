-- =====================================================
-- DIAGN√ìSTICO DA SOLU√á√ÉO SEGURA RLS - PET CONNECT
-- =====================================================
-- Script para verificar se a corre√ß√£o segura foi aplicada corretamente

-- =====================================================
-- 1. VERIFICAR ESTRUTURA B√ÅSICA
-- =====================================================

-- Verificar se as tabelas existem e t√™m RLS habilitado
SELECT 
  'TABELAS E RLS' as categoria,
  schemaname,
  tablename,
  rowsecurity as rls_habilitado,
  CASE 
    WHEN rowsecurity THEN '‚úÖ RLS Ativo'
    ELSE '‚ùå RLS Inativo'
  END as status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('companies', 'users', 'clients', 'pets', 'services', 'appointments', 'transactions', 'notifications')
ORDER BY tablename;

-- =====================================================
-- 2. VERIFICAR FUN√á√ÉO HELPER
-- =====================================================

-- Verificar se a fun√ß√£o helper foi criada
SELECT 
  'FUN√á√ÉO HELPER' as categoria,
  proname as nome_funcao,
  pronamespace::regnamespace as schema,
  prosecdef as security_definer,
  CASE 
    WHEN prosecdef THEN '‚úÖ Security Definer Ativo'
    ELSE '‚ùå Security Definer Inativo'
  END as status
FROM pg_proc 
WHERE proname = 'get_user_company_id'
AND pronamespace = 'auth'::regnamespace;

-- =====================================================
-- 3. VERIFICAR POL√çTICAS RLS
-- =====================================================

-- Listar todas as pol√≠ticas RLS criadas
SELECT 
  'POL√çTICAS RLS' as categoria,
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd as operacao,
  CASE 
    WHEN qual IS NOT NULL THEN '‚úÖ Com USING'
    ELSE '‚ö†Ô∏è Sem USING'
  END as using_clause,
  CASE 
    WHEN with_check IS NOT NULL THEN '‚úÖ Com WITH CHECK'
    ELSE '‚ö†Ô∏è Sem WITH CHECK'
  END as with_check_clause
FROM pg_policies 
WHERE schemaname = 'public'
AND tablename IN ('companies', 'users', 'clients', 'pets', 'services', 'appointments', 'transactions', 'notifications')
ORDER BY tablename, policyname;

-- =====================================================
-- 4. VERIFICAR FUN√á√ïES DE SETUP
-- =====================================================

-- Verificar se as fun√ß√µes de setup foram criadas
SELECT 
  'FUN√á√ïES DE SETUP' as categoria,
  proname as nome_funcao,
  pronamespace::regnamespace as schema,
  pronargs as num_argumentos,
  prosecdef as security_definer,
  CASE 
    WHEN proname = 'create_initial_user_and_company' THEN '‚úÖ Fun√ß√£o de Setup Principal'
    WHEN proname = 'create_test_data' THEN '‚úÖ Fun√ß√£o de Dados de Teste'
    WHEN proname = 'clean_test_data' THEN '‚úÖ Fun√ß√£o de Limpeza'
    ELSE '‚ö†Ô∏è Fun√ß√£o Desconhecida'
  END as status
FROM pg_proc 
WHERE proname IN ('create_initial_user_and_company', 'create_test_data', 'clean_test_data')
AND pronamespace = 'public'::regnamespace
ORDER BY proname;

-- =====================================================
-- 5. VERIFICAR USU√ÅRIO ATUAL
-- =====================================================

-- Verificar informa√ß√µes do usu√°rio autenticado
SELECT 
  'USU√ÅRIO ATUAL' as categoria,
  auth.uid() as user_id,
  CASE 
    WHEN auth.uid() IS NOT NULL THEN '‚úÖ Usu√°rio Autenticado'
    ELSE '‚ùå Usu√°rio N√£o Autenticado'
  END as status_auth,
  auth.role() as role_atual;

-- =====================================================
-- 6. TESTAR FUN√á√ÉO HELPER
-- =====================================================

-- Testar se a fun√ß√£o helper funciona (s√≥ funciona se usu√°rio estiver autenticado)
SELECT 
  'TESTE FUN√á√ÉO HELPER' as categoria,
  CASE 
    WHEN auth.uid() IS NOT NULL THEN
      CASE 
        WHEN auth.get_user_company_id() IS NOT NULL THEN 
          '‚úÖ Fun√ß√£o retorna company_id: ' || auth.get_user_company_id()::text
        ELSE 
          '‚ö†Ô∏è Fun√ß√£o retorna NULL (usu√°rio pode n√£o ter company_id)'
      END
    ELSE '‚ùå N√£o √© poss√≠vel testar - usu√°rio n√£o autenticado'
  END as resultado;

-- =====================================================
-- 7. VERIFICAR DADOS EXISTENTES
-- =====================================================

-- Contar registros nas tabelas principais
SELECT 
  'CONTAGEM DE DADOS' as categoria,
  'companies' as tabela,
  COUNT(*) as total_registros
FROM companies
UNION ALL
SELECT 
  'CONTAGEM DE DADOS' as categoria,
  'users' as tabela,
  COUNT(*) as total_registros
FROM users
UNION ALL
SELECT 
  'CONTAGEM DE DADOS' as categoria,
  'clients' as tabela,
  COUNT(*) as total_registros
FROM clients
UNION ALL
SELECT 
  'CONTAGEM DE DADOS' as categoria,
  'pets' as tabela,
  COUNT(*) as total_registros
FROM pets
ORDER BY tabela;

-- =====================================================
-- 8. VERIFICAR ESTRUTURA DAS TABELAS PRINCIPAIS
-- =====================================================

-- Verificar estrutura da tabela users
SELECT 
  'ESTRUTURA USERS' as categoria,
  column_name,
  data_type,
  is_nullable,
  column_default,
  CASE 
    WHEN column_name = 'id' THEN '‚úÖ Chave prim√°ria'
    WHEN column_name = 'company_id' THEN '‚úÖ Refer√™ncia para empresa'
    WHEN column_name = 'email' THEN '‚úÖ Email do usu√°rio'
    WHEN column_name = 'role' THEN '‚úÖ Papel do usu√°rio'
    ELSE 'üìã Campo adicional'
  END as descricao
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'users'
ORDER BY ordinal_position;

-- Verificar estrutura da tabela companies
SELECT 
  'ESTRUTURA COMPANIES' as categoria,
  column_name,
  data_type,
  is_nullable,
  column_default,
  CASE 
    WHEN column_name = 'id' THEN '‚úÖ Chave prim√°ria'
    WHEN column_name = 'plan_type' THEN '‚úÖ Tipo de plano'
    WHEN column_name = 'subscription_status' THEN '‚úÖ Status da assinatura'
    ELSE 'üìã Campo adicional'
  END as descricao
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'companies'
ORDER BY ordinal_position;

-- =====================================================
-- 9. VERIFICAR CONSTRAINTS E FOREIGN KEYS
-- =====================================================

-- Verificar foreign keys importantes
SELECT 
  'FOREIGN KEYS' as categoria,
  tc.table_name,
  kcu.column_name,
  ccu.table_name AS foreign_table_name,
  ccu.column_name AS foreign_column_name,
  CASE 
    WHEN tc.table_name = 'users' AND ccu.table_name = 'companies' THEN '‚úÖ Users -> Companies'
    WHEN tc.table_name = 'clients' AND ccu.table_name = 'companies' THEN '‚úÖ Clients -> Companies'
    WHEN tc.table_name = 'pets' AND ccu.table_name = 'clients' THEN '‚úÖ Pets -> Clients'
    ELSE 'üìã Outra rela√ß√£o'
  END as descricao
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
  AND tc.table_schema = kcu.table_schema
JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
  AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY' 
AND tc.table_schema = 'public'
AND tc.table_name IN ('users', 'clients', 'pets', 'services', 'appointments')
ORDER BY tc.table_name, kcu.column_name;

-- =====================================================
-- 10. RESUMO DO DIAGN√ìSTICO
-- =====================================================

-- Resumo final
SELECT 
  'RESUMO DIAGN√ìSTICO' as categoria,
  'Status Geral' as item,
  CASE 
    WHEN (
      SELECT COUNT(*) FROM pg_proc 
      WHERE proname = 'get_user_company_id' 
      AND pronamespace = 'auth'::regnamespace
    ) > 0 
    AND (
      SELECT COUNT(*) FROM pg_policies 
      WHERE schemaname = 'public'
    ) > 0
    THEN '‚úÖ Solu√ß√£o Segura Implementada'
    ELSE '‚ùå Solu√ß√£o N√£o Implementada Completamente'
  END as status;

-- =====================================================
-- INSTRU√á√ïES PARA USO:
-- =====================================================
-- 1. Execute este script no SQL Editor do Supabase
-- 2. Analise os resultados de cada se√ß√£o
-- 3. Verifique se todos os itens t√™m status ‚úÖ
-- 4. Se houver ‚ùå, execute novamente o fix_rls_safe.sql
-- =====================================================

-- Mostrar timestamp do diagn√≥stico
SELECT 
  'DIAGN√ìSTICO EXECUTADO EM' as categoria,
  NOW() as timestamp_utc,
  NOW() AT TIME ZONE 'America/Sao_Paulo' as timestamp_brasilia;